// Generated by CoffeeScript 1.6.2
(function() {
  var Events, Noted, extendWithEvents, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Events = typeof window !== "undefined" && window !== null ? window.Backbone.Events : require('backbone').Events;

  extendWithEvents = function(obj) {
    var prop, value, _results;

    _results = [];
    for (prop in Events) {
      value = Events[prop];
      _results.push(obj[prop] = value);
    }
    return _results;
  };

  Noted = {};

  Noted.Message = (function() {
    function Message(body, options) {
      if (body == null) {
        body = '';
      }
      this.options = options != null ? options : {};
      this._hidden = false;
      this.setBody(body);
      this.listenTo(this, 'hide', this.hide);
    }

    Message.prototype.getBody = function() {
      return this.body;
    };

    Message.prototype.setBody = function(body) {
      this.body = body;
    };

    Message.prototype.delivered = false;

    Message.prototype.isDelivered = function() {
      return this.delivered;
    };

    Message.prototype.setDelivered = function(delivered) {
      this.delivered = delivered != null ? delivered : true;
    };

    Message.prototype.isHidden = function() {
      return this._hidden;
    };

    Message.prototype.hide = function() {
      return this._hidden = true;
    };

    return Message;

  })();

  extendWithEvents(Noted.Message.prototype);

  Noted.Event = (function() {
    function Event(group, name) {
      this.group = group;
      this.name = name;
    }

    Event.prototype.getName = function() {
      return this.name;
    };

    Event.prototype.getGroup = function() {
      return this.group;
    };

    Event.prototype.setGroup = function(group) {
      this.group = group;
    };

    return Event;

  })();

  extendWithEvents(Noted.Event.prototype);

  Noted.EventGroup = (function() {
    function EventGroup(name) {
      this.name = name;
      this._eventObjs = {};
    }

    EventGroup.prototype.getName = function() {
      return this.name;
    };

    EventGroup.prototype.add = function(event) {
      if (event instanceof Noted.Event) {
        this._eventObjs[event.getName()] = event;
        event.setGroup(this);
        return event;
      } else {
        return this._eventObjs[event] = new Noted.Event(this, event);
      }
    };

    EventGroup.prototype.get = function(name) {
      return this._eventObjs[name];
    };

    EventGroup.prototype.remove = function(event) {
      var name;

      name = event instanceof Noted.Event ? event.name : event;
      return delete this._eventObjs[name];
    };

    return EventGroup;

  })();

  extendWithEvents(Noted.EventGroup.prototype);

  Noted.Broker = (function() {
    function Broker() {
      this._eventGroups = {};
    }

    Broker.prototype.subscribe = function(message, callback, context) {
      var event;

      event = this.get(message);
      return event.getGroup().on(event.getName(), callback, context);
    };

    Broker.prototype.publish = function(message, body) {
      var event;

      event = this.get(message);
      message = new Noted.Message(body);
      event.getGroup().trigger(event.getName(), message);
      return message;
    };

    Broker.prototype.unsubscribe = function(message, callback, context) {
      var event, group, name, _ref, _results;

      if (message) {
        event = this.get(message);
        return event.getGroup().off(event.getName(), callback);
      } else {
        if (context) {
          _ref = this._eventGroups;
          _results = [];
          for (name in _ref) {
            group = _ref[name];
            _results.push(group.off(void 0, void 0, context));
          }
          return _results;
        }
      }
    };

    Broker.prototype.get = function(message) {
      var eventName, group, groupName, _base, _ref;

      _ref = this.parse(message), groupName = _ref[0], eventName = _ref[1];
      group = (_base = this._eventGroups)[groupName] || (_base[groupName] = new Noted.EventGroup(groupName));
      return group.get(eventName) || group.add(eventName);
    };

    Broker.prototype.parse = function(message) {
      var eventName, groupName, _ref;

      _ref = message.match(/(?:(.+):|)(.*)/).slice(1), groupName = _ref[0], eventName = _ref[1];
      return [groupName, eventName || 'all'];
    };

    return Broker;

  })();

  Noted.MessagesList = (function() {
    function MessagesList(broker, context) {
      this._messages = [];
      this._events = {};
      extendWithEvents(this._events);
      this.setBroker(broker);
      this.setContext(context);
    }

    MessagesList.prototype.getBroker = function() {
      return this.broker;
    };

    MessagesList.prototype.setBroker = function(broker) {
      this.broker = broker;
    };

    MessagesList.prototype.getContext = function() {
      return this.context;
    };

    MessagesList.prototype.setContext = function(context) {
      this.context = context;
    };

    MessagesList.prototype.getMessages = function() {
      return this._messages;
    };

    MessagesList.prototype.store = function(message) {
      var retrigger;

      this._messages.push(message);
      retrigger = function() {
        var args, event, _ref;

        event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return (_ref = this._events).trigger.apply(_ref, [event, message].concat(__slice.call(args)));
      };
      message.on('all', retrigger, this);
      return message;
    };

    MessagesList.prototype.trigger = function() {
      var args, event, message, _i, _len, _ref, _results;

      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      _ref = this._messages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        message = _ref[_i];
        _results.push(message.trigger.apply(message, [event].concat(__slice.call(args))));
      }
      return _results;
    };

    MessagesList.prototype.on = function(event, callback) {
      return this._events.on(event, callback, this.context);
    };

    return MessagesList;

  })();

  Noted.Emitter = (function(_super) {
    __extends(Emitter, _super);

    function Emitter() {
      _ref = Emitter.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Emitter.prototype.emit = function(message, body) {
      message = this.broker.publish(message, body);
      this._messages.push(message);
      return message;
    };

    return Emitter;

  })(Noted.MessagesList);

  Noted.Receiver = (function(_super) {
    __extends(Receiver, _super);

    function Receiver() {
      Receiver.__super__.constructor.apply(this, arguments);
    }

    Receiver.prototype.listen = function(message, callback) {
      var receiver, storeMessage;

      receiver = this;
      storeMessage = function() {
        var args, message;

        message = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        receiver._messages.push(message);
        return callback.apply(this, arguments);
      };
      storeMessage._callback = callback;
      return this.broker.subscribe(message, storeMessage, this.context);
    };

    Receiver.prototype.stop = function(message, callback) {
      return this.broker.unsubscribe(message, callback, this.context);
    };

    return Receiver;

  })(Noted.MessagesList);

  if (typeof window !== "undefined" && window !== null) {
    window.Noted = Noted;
  } else {
    module.exports = Noted;
  }

}).call(this);
